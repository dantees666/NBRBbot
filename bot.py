import asyncio
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import telebot
from aiosmtplib import SMTP
from fuzzywuzzy import fuzz
from telebot import types
import config
import re

bot = telebot.TeleBot(config.token)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
EMAIL_HOST = "smtp.mail.ru"
EMAIL_PORT = 465
EMAIL_USER = "tumen95@bk.ru" # –ü–æ—á—Ç–∞ —Å –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
EMAIL_PASS = "***********" # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —ç–º—ç–π–ª!)
EMAIL_TO = "tumen95@bk.ru" # –ü–æ—á—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

# –°–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
FAQ_ANSWERS = {
    "–æ –Ω–∞—Å": {
        "answer": "üìñ <b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë—É—Ä—è—Ç–∏—è</b> ‚Äî —Ü–µ–Ω—Ç—Ä –∑–Ω–∞–Ω–∏–π, –∫—É–ª—å—Ç—É—Ä—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π.\n\n"
                  "–ê–¥—Ä–µ—Å: –£–ª–∞–Ω-–£–¥—ç, —É–ª. –õ–µ–Ω–∏–Ω–∞, 50.\n"
                  "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç —Å 9:00 –¥–æ 18:00, –°–± —Å 10:00 –¥–æ 17:00, –í—Å ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π.\n\n"
                  "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ <a href='https://nbrb.ru/'>–Ω–∞—à–µ–º —Å–∞–π—Ç–µ</a>.",
        "synonyms": ["–æ –Ω–∞—Å", "—á—Ç–æ —ç—Ç–æ –∑–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"]
    },
    "—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã": {
        "answer": "üìÖ <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:</b>\n\n"
                  "–ü–Ω-–ü—Ç: —Å 9:00 –¥–æ 18:00\n"
                  "–°–±: —Å 10:00 –¥–æ 17:00\n"
                  "–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π.\n\n"
                  "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è!",
        "synonyms": ["—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã", "–≤–æ —Å–∫–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", "–¥–æ —Å–∫–æ–ª—å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
                     "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞"]
    },
    "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è": {
        "answer": "üéâ <b>–ù–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
                  "üìÖ –õ–µ–∫—Ü–∏–∏, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∫–Ω–∏–≥, —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ —Ö–æ—Ä–∞ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
                  "üìå –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞—Ñ–∏—à–µ–π –Ω–∞ <a href='https://nbrbru.tmweb.ru/affiche/'>–Ω–∞—à–µ–º —Å–∞–π—Ç–µ</a>.",
        "synonyms": ["–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–∫–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç", "—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"]
    },
    "—ç–∫—Å–∫—É—Ä—Å–∏—è": {
        "answer": "üö∂‚Äç‚ôÇÔ∏è <b>–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é?</b>\n\n"
                  "–ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–∞ —Å—Ç–æ–π–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω –ø–æ "
                  "<a href='https://iframeab-pre6061.intickets.ru/event/12331186'>—Å—Å—ã–ª–∫–µ</a>.",
        "synonyms": ["—ç–∫—Å–∫—É—Ä—Å–∏—è", "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é", "–∑–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é"]
    },
    "—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã": {
        "answer": "üìö <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
                  "1. <b>–ö—Ç–æ –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?</b> \n"
                  "–ì—Ä–∞–∂–¥–∞–Ω–µ –†–§ –∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü—ã —Å—Ç–∞—Ä—à–µ 14 –ª–µ—Ç —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º.\n\n"
                  "2. <b>–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?</b>\n"
                  "–õ–∏—á–Ω–æ –Ω–∞ —Å—Ç–æ–π–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏. "
                  "<a href='https://nbrbru.tmweb.ru/info/kak-zapisatsa/'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n\n"
                  "3. <b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–º –±–∏–ª–µ—Ç–æ–º?</b>\n"
                  "–ë—Ä–∞—Ç—å –∫–Ω–∏–≥–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ—Å—É—Ä—Å–∞–º–∏, —Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ –ü–ö.\n\n"
                  "4. <b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏?</b>\n"
                  "–í —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π –±–∏–ª–µ—Ç). "
                  "<a href='http://nbrbru.tmweb.ru/info/kak-zakazat-knigu/'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n\n"
                  "5. <b>–ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥–∏?</b>\n"
                  "–î–æ 5 –∫–Ω–∏–≥ –Ω–∞ 15 –¥–Ω–µ–π, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å 2 —Ä–∞–∑–∞. "
                  "<a href='http://nbrbru.tmweb.ru/info/kak-prodlit-knigu'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n\n"
                  "6. <b>–ß—Ç–æ –º–æ–∂–Ω–æ –±–µ–∑ –±–∏–ª–µ—Ç–∞?</b>\n"
                  "–ü–æ—Å–µ—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —ç–∫—Å–∫—É—Ä—Å–∏–∏, –∫—É–ø–∏—Ç—å –∫–Ω–∏–≥–∏.\n\n"
                  "7. <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n"
                  "–ö—Å–µ—Ä–æ–∫–æ–ø–∏—è, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –∫–Ω–∏–≥.",
        "synonyms": ["—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "–≤–æ–ø—Ä–æ—Å", "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–∫–Ω–∏–≥–∏", "–ë–µ–∑ –±–∏–ª–µ—Ç–∞", "–ó–∞–∫–∞–∑–∞—Ç—å"]
    }
}
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
EMAIL_SUBJECTS = ["–í–æ–ø—Ä–æ—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—é", "–í–æ–ø—Ä–æ—Å –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É", "–í–æ–ø—Ä–æ—Å –ø–æ –∫–Ω–∏–≥–∞–º", "–í–æ–ø—Ä–æ—Å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö",
                  "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"]

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ email
PHONE_REGEX = r"^\+?[78][0-9]{10}$"  # –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (7, 8 –∏–ª–∏ +7 –∏ 10 —Ü–∏—Ñ—Ä)
EMAIL_REGEX = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
LIBRARY_CART_REGEX = r"^[0-9]{6}$"  # –ù–æ–º–µ—Ä —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (6 —Ü–∏—Ñ—Ä)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
def get_closest_match(user_input):
    best_match, highest_score = None, 0
    for key, data in FAQ_ANSWERS.items():
        for synonym in data["synonyms"]:
            similarity = fuzz.partial_ratio(user_input.lower(), synonym.lower())
            if similarity > highest_score:
                best_match, highest_score = key, similarity
    return best_match if highest_score > 60 else None  # –ü–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email
async def send_email_async(name, phone, email, city, subject, message, library_card):
    try:
        msg = MIMEMultipart()
        msg["From"] = EMAIL_USER
        msg["To"] = EMAIL_TO
        msg["Subject"] = subject  # –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
        body = (f"<b>–ò–º—è:</b> {name}<br><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}<br><b>Email:</b> {email}<br>"
                f"<b>–ì–æ—Ä–æ–¥:</b> {city}<br><b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message}<br><b>–ß–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π –±–∏–ª–µ—Ç:</b> {library_card}")
        msg.attach(MIMEText(body, "html", "utf-8"))

        async with SMTP(hostname=EMAIL_HOST, port=EMAIL_PORT, use_tls=True) as smtp_client:
            await smtp_client.login(EMAIL_USER, EMAIL_PASS)
            await smtp_client.send_message(msg)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")


def add_interrupt_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü—Ä–µ—Ä–≤–∞—Ç—å (–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—é)")
    return markup


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–û –Ω–∞—Å", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é?")
    markup.add("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—é")
    bot.send_message(
        message.chat.id,
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é üëá",
        reply_markup=markup,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.chat.id
    if user_id in user_data and user_data[user_id].get("step"):
        process_dialog(message)
        return

    if message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—é":
        description = (
            "–°–ø—Ä–æ—Å–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è ‚Äî –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –†–ë\n\n"
            "–ß—Ç–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ:\n"
            "- –°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã (–¥–æ 10 –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π) –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.\n"
            "- –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–∏–≥–∞—Ö, –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏–∑–¥–∞–Ω–∏–π –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.\n"
            "- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –æ—Ç–¥–µ–ª–æ–≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.\n\n"
            "–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏:\n"
            "- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π (–Ω–æ –Ω–µ –∫–Ω–∏–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é).\n"
            "- –°–ø–∏—Å–∫–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –±–æ–ª–µ–µ 10 –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π.\n"
            "- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ—Å–∏—Ç–µ–ª–∏.\n"
            "- –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.\n\n"
            "–ß—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –¥–µ–ª–∞–µ—Ç:\n"
            "- –ù–µ —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ—á–Ω—ã–º –Ω–∞—É–∫–∞–º.\n"
            "- –ù–µ –ø–∏—à–µ—Ç –∑–∞ –≤–∞—Å —Ä–µ—Ñ–µ—Ä–∞—Ç—ã, –∫—É—Ä—Å–æ–≤—ã–µ, –¥–∏–ø–ª–æ–º—ã.\n"
            "- –ù–µ –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞—Ö –∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.\n"
            "- –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∫–Ω–∏–≥ (—Ç–æ–ª—å–∫–æ –≤ –∑–¥–∞–Ω–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏).\n\n"
            "–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:\n"
            "- –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É, –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.\n"
            "- –û—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n\n"
            "–õ–∏–º–∏—Ç—ã:\n"
            "- –ù–µ –±–æ–ª–µ–µ 3 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:\n"
            "- –û–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –∫—Ä–æ–º–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ (–≤—Ä–µ–º—è –£–ª–∞–Ω-–£–¥—ç, UTC+9)."
        )
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "–ù–µ –ø–∏—Å–∞—Ç—å")
        bot.send_message(user_id, description, reply_markup=markup)
    elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        user_data[user_id] = {"step": "name"}
        bot.send_message(user_id, "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:", reply_markup=add_interrupt_buttons())
    else:
        user_input = message.text.strip()
        match = get_closest_match(user_input)
        if match:
            bot.send_message(user_id, FAQ_ANSWERS[match]["answer"], parse_mode='html')
        else:
            bot.send_message(user_id, "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤ –¥–∏–∞–ª–æ–≥–∞
def process_dialog(message):
    user_id = message.chat.id
    user = user_data.setdefault(user_id, {})
    step = user.get("step")

    if message.text == "–ü—Ä–µ—Ä–≤–∞—Ç—å":
        user_data.pop(user_id, None)
        bot.send_message(user_id, "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=add_interrupt_buttons())
        return

    if step == "name":
        user["name"] = message.text
        user["step"] = "subject"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for subject in EMAIL_SUBJECTS:
            markup.add(subject)
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=markup)

    elif step == "subject":
        if message.text in EMAIL_SUBJECTS:
            user["subject"] = message.text
            user["step"] = "phone"
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=add_interrupt_buttons())
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

    elif step == "phone":
        if re.match(PHONE_REGEX, message.text):
            user["phone"] = message.text
            user["step"] = "has_library_card"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add("–î–∞", "–ù–µ—Ç")
            bot.send_message(user_id, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∏–π –±–∏–ª–µ—Ç?", reply_markup=markup)
        else:
            bot.send_message(user_id,
                             "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.")

    elif step == "has_library_card":
        if message.text.lower() == "–¥–∞":
            user["step"] = "library_card"
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ (6 —Ü–∏—Ñ—Ä):",
                             reply_markup=add_interrupt_buttons())
        else:
            user["step"] = "email"
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à E-mail:", reply_markup=add_interrupt_buttons())

    elif step == "library_card":
        if re.match(LIBRARY_CART_REGEX, message.text):
            user["library_card"] = message.text
            user["step"] = "email"
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à E-mail:", reply_markup=add_interrupt_buttons())
        else:
            bot.send_message(user_id, "üö´ –ù–æ–º–µ—Ä —á–∏—Ç–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    elif step == "email":
        if re.match(EMAIL_REGEX, message.text):
            user["email"] = message.text
            user["step"] = "city"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):", reply_markup=markup)
        else:
            bot.send_message(user_id, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç E-mail. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")

    elif step == "city":
        user["city"] = message.text
        user["step"] = "message"
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=add_interrupt_buttons())


    elif step == "message":
        user["message"] = message.text
        data = user_data.pop(user_id, {})

        asyncio.run(send_email_async(
            data.get("name"),
            data.get("phone"),
            data.get("email"),
            data.get("city", '–ù–µ —É–∫–∞–∑–∞–Ω'),
            data.get("subject", '–í–æ–ø—Ä–æ—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—é'),
            data.get("message"),
            data.get("library_card", '–ù–µ —É–∫–∞–∑–∞–Ω')
        ))

        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.infinity_polling()